# syntax=docker/dockerfile:1.4
# Multi-stage Dockerfile for Linux cross-compilation
# Container runs on native architecture, Zig handles cross-compilation
# Using Ubuntu 20.04 (glibc 2.31, OpenSSL 1.1.1f) - code supports both 1.1.1 and 3.0+ APIs
FROM ubuntu:20.04 AS builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG ZIG_VERSION=0.15.1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    xz-utils \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install TLS dependencies for target platform
# Container architecture now matches target (no cross-compilation needed)
# Set non-interactive mode and pre-configure tzdata to avoid prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    apt-get update && apt-get install -y \
    gcc \
    libssl-dev \
    libcrypto++-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install Zig compiler (architecture-aware)
RUN ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac) && \
    wget -q https://ziglang.org/download/${ZIG_VERSION}/zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    tar -xf zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    mv zig-${ARCH}-linux-${ZIG_VERSION} /opt/zig && \
    rm zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Create build directory
WORKDIR /build

# Copy source code
COPY . .

# Platform-to-Zig target mapping script
RUN printf '#!/bin/bash\n\
case "$1" in\n\
  "linux/amd64") echo "x86_64-linux-gnu" ;;\n\
  "linux/arm64") echo "aarch64-linux-gnu" ;;\n\
  *) echo "x86_64-linux-gnu" ;;\n\
esac\n' > /usr/local/bin/platform-to-zig-target.sh \
    && chmod +x /usr/local/bin/platform-to-zig-target.sh

# Set Zig cache directories for consistency with Alpine builds
# Using /build for local cache (persistent across build steps)
# Using /tmp for global cache (temporary but accessible)
# This prevents cache corruption issues seen with overlayfs + faccessat2
ENV ZIG_LOCAL_CACHE_DIR=/build/.zig-cache
ENV ZIG_GLOBAL_CACHE_DIR=/tmp/zig-global-cache

# Create cache directories with proper permissions
# CRITICAL: Ensure cache directories exist before first build command
RUN mkdir -p "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR" && \
    chmod -R 777 "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR"

# Build for target platform
# NOTE: Known issue with Zig 0.15.1 + Docker BuildKit + emulated AMD64 on ARM64 hosts
#       The faccessat2 syscall may fail with errno 38 (ENOSYS) on some platforms
#       ARM64 builds work reliably, AMD64 builds may fail on Apple Silicon hosts
#       See: https://github.com/ziglang/zig/issues/18180
RUN ZIG_TARGET=$(/usr/local/bin/platform-to-zig-target.sh $TARGETPLATFORM) && \
    echo "Building for Zig target: $ZIG_TARGET with TLS enabled" && \
    zig build -Dtarget=$ZIG_TARGET -Drelease=true -Dtls=true --cache-dir "$ZIG_LOCAL_CACHE_DIR" --global-cache-dir "$ZIG_GLOBAL_CACHE_DIR"

# Run unit tests
RUN ZIG_TARGET=$(/usr/local/bin/platform-to-zig-target.sh $TARGETPLATFORM) && \
    echo "Running tests for Zig target: $ZIG_TARGET with TLS enabled" && \
    zig build test -Dtarget=$ZIG_TARGET -Drelease=true -Dtls=true --cache-dir "$ZIG_LOCAL_CACHE_DIR" --global-cache-dir "$ZIG_GLOBAL_CACHE_DIR"

# Export stage for artifacts
FROM scratch AS artifacts
COPY --from=builder /build/zig-out/bin/ /bin/
COPY --from=builder /build/zig-out/ /artifacts/

# Runtime stage for testing
FROM ubuntu:20.04 AS runtime

# Install runtime dependencies for testing
RUN apt-get update && apt-get install -y \
    netcat-openbsd \
    curl \
    wget \
    bc \
    procps \
    iproute2 \
    iputils-ping \
    telnet \
    socat \
    strace \
    tcpdump \
    net-tools \
    dnsutils \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Zig for test execution (architecture-aware)
ARG ZIG_VERSION=0.15.1
RUN ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac) && \
    wget -q https://ziglang.org/download/${ZIG_VERSION}/zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    tar -xf zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    mv zig-${ARCH}-linux-${ZIG_VERSION} /opt/zig && \
    rm zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Create test user for security tests
RUN useradd -m -s /bin/bash testuser

# Copy built binaries
COPY --from=builder /build/zig-out/bin/ /usr/local/bin/

# Create test directories
RUN mkdir -p /test-results /test-logs /artifacts
WORKDIR /test

# Set up network namespace capabilities for testing
RUN echo 'net.ipv4.ip_unprivileged_port_start = 1024' >> /etc/sysctl.conf

# Default command
CMD ["/bin/bash", "-c", "sleep infinity"]
