# Multi-stage Dockerfile for Linux glibc builds with OpenSSL TLS
# Builds dynamic binaries for x86_64 and aarch64 with OpenSSL support
#
# Usage:
#   docker build --platform=linux/amd64 -f docker-tests/dockerfiles/release/Dockerfile.linux-glibc .
#   docker build --platform=linux/arm64 -f docker-tests/dockerfiles/release/Dockerfile.linux-glibc .

FROM --platform=$TARGETPLATFORM ubuntu:22.04 AS builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG ZIG_VERSION=0.15.1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    xz-utils \
    ca-certificates \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Zig compiler (architecture-aware)
RUN ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac) && \
    wget -q https://ziglang.org/download/${ZIG_VERSION}/zig-linux-${ARCH}-${ZIG_VERSION}.tar.xz && \
    tar -xf zig-linux-${ARCH}-${ZIG_VERSION}.tar.xz && \
    mv zig-linux-${ARCH}-${ZIG_VERSION} /opt/zig && \
    rm zig-linux-${ARCH}-${ZIG_VERSION}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Set Zig cache directories
ENV ZIG_LOCAL_CACHE_DIR=/build/.zig-cache
ENV ZIG_GLOBAL_CACHE_DIR=/tmp/zig-global-cache

# Create cache directories
RUN mkdir -p "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR"

# Create build directory
WORKDIR /build

# Copy source code
COPY . .

# Platform-to-Zig target mapping for glibc
RUN printf '#!/bin/bash\n\
case "$1" in\n\
  "linux/amd64") echo "x86_64-linux-gnu" ;;\n\
  "linux/arm64") echo "aarch64-linux-gnu" ;;\n\
  *) echo "x86_64-linux-gnu" ;;\n\
esac\n' > /usr/local/bin/platform-to-zig-target.sh \
    && chmod +x /usr/local/bin/platform-to-zig-target.sh

# Build for glibc target with OpenSSL TLS (dynamic linking)
# Binary will be named zigcat and supports TLS via OpenSSL
RUN --mount=type=cache,target=/build/.zig-cache \
    --mount=type=cache,target=/tmp/zig-global-cache \
    ZIG_TARGET=$(/usr/local/bin/platform-to-zig-target.sh "$TARGETPLATFORM") && \
    echo "Building for target: $ZIG_TARGET (platform: $TARGETPLATFORM)" && \
    zig build -Dtarget="$ZIG_TARGET" -Doptimize=ReleaseSmall -Dstrip=true -Dtls=true -Dtls-backend=openssl

# Run unit tests (skip for cross-compilation)
RUN --mount=type=cache,target=/build/.zig-cache \
    --mount=type=cache,target=/tmp/zig-global-cache \
    ZIG_TARGET=$(/usr/local/bin/platform-to-zig-target.sh "$TARGETPLATFORM") && \
    NATIVE_TARGET=$(case "$(uname -m)" in \
        x86_64) echo "x86_64-linux-gnu";; \
        aarch64) echo "aarch64-linux-gnu";; \
        *) echo "unknown";; \
    esac) && \
    if [ "$ZIG_TARGET" = "$NATIVE_TARGET" ]; then \
        echo "Running native tests with OpenSSL TLS (dynamic)" && \
        zig build test -Doptimize=ReleaseSmall -Dtls=true -Dtls-backend=openssl; \
    else \
        echo "Skipping tests for cross-compilation (target: $ZIG_TARGET, native: $NATIVE_TARGET)"; \
    fi

# Export stage for artifacts
FROM scratch AS artifacts
COPY --from=builder /build/zig-out/bin/ /bin/
COPY --from=builder /build/zig-out/ /artifacts/

# Runtime stage for testing
FROM ubuntu:22.04 AS runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    netcat-openbsd \
    curl \
    wget \
    file \
    ldd \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy built binary
COPY --from=builder /build/zig-out/bin/zigcat /usr/local/bin/

# Verify dynamic linking
RUN echo "=== Binary Information ===" && \
    file /usr/local/bin/zigcat && \
    ls -lh /usr/local/bin/zigcat && \
    echo "=== Dynamic Dependencies ===" && \
    ldd /usr/local/bin/zigcat && \
    echo "=== Version Check ===" && \
    /usr/local/bin/zigcat --version

# Create test directories
RUN mkdir -p /test-results /test-logs /artifacts
WORKDIR /test

# Default command
CMD ["/bin/bash", "-c", "sleep infinity"]
