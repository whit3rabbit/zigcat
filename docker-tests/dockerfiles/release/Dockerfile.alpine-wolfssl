# syntax=docker/dockerfile:1.5
# Multi-stage Dockerfile for Alpine/musl static builds with wolfSSL TLS
# Builds the SMALLEST zigcat binary with TLS support (~835KB on x64)
# IMPORTANT: wolfSSL is licensed under GPLv2
#
# Usage:
#   docker build --platform=linux/amd64 \
#     --security-opt seccomp=docker-tests/seccomp/zig-builder.json \
#     -f docker-tests/dockerfiles/release/Dockerfile.alpine-wolfssl .

ARG BASE_IMAGE=alpine:edge
ARG RUNTIME_BASE_IMAGE=alpine:edge
FROM --platform=$TARGETPLATFORM ${BASE_IMAGE} AS builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG ZIG_VERSION=latest
ARG DEFAULT_ZIG_VERSION=0.15.1
ARG BUILD_OPTIONS=""
ARG ZIG_TARGET
ARG BUILD_ID=default

# Install system dependencies including wolfSSL and gcc for shim
# NOTE: wolfssl-dev provides static library (.a) and unversioned symlink (.so) needed for Zig
# Available in Alpine edge/community repository
# gcc/musl-dev needed to compile faccessat2 shim for old Docker/seccomp
RUN apk add --no-cache \
    wget \
    xz \
    ca-certificates \
    bash \
    wolfssl-dev \
    gcc \
    musl-dev

# Install Zig version resolver helper
COPY docker-tests/scripts/resolve-zig-version.sh /usr/local/bin/resolve-zig-version
RUN chmod +x /usr/local/bin/resolve-zig-version

# Install Zig compiler (architecture-aware)
RUN set -eux; \
    ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac); \
    ZIG_ACTUAL=$(DEFAULT_ZIG_VERSION=$DEFAULT_ZIG_VERSION resolve-zig-version "$ZIG_VERSION"); \
    echo "Using Zig version ${ZIG_ACTUAL}"; \
    wget -q https://ziglang.org/download/${ZIG_ACTUAL}/zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz; \
    tar -xf zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz; \
    mv zig-${ARCH}-linux-${ZIG_ACTUAL} /opt/zig; \
    rm zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Set Zig cache directories with unique BUILD_ID to prevent cache corruption
# Each build gets its own isolated cache, avoiding "unable to access options file" errors
ARG BUILD_ID
ENV ZIG_LOCAL_CACHE_DIR=/build/.zig-cache-${BUILD_ID}
ENV ZIG_GLOBAL_CACHE_DIR=/tmp/zig-global-cache-${BUILD_ID}

# Create cache directories
RUN mkdir -p "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR"

# Create build directory
WORKDIR /build

# Copy source code
COPY . .

# Compile faccessat2 shim (workaround for old Docker/seccomp)
# This intercepts faccessat2 syscalls and redirects to faccessat
# Required for Zig 0.15.1 on Docker < 20.10.6 or libseccomp < 2.4.4
RUN gcc -shared -fPIC -o /usr/local/lib/faccessat2_shim.so docker-tests/preload/faccessat2_shim.c && \
    echo "Compiled faccessat2 shim for syscall workaround"

# Platform-to-Zig target mapping for musl
RUN printf '#!/bin/bash\n\
case "$1" in\n\
  "linux/amd64") echo "x86_64-linux-musl" ;;\n\
  "linux/arm64") echo "aarch64-linux-musl" ;;\n\
  *) echo "x86_64-linux-musl" ;;\n\
esac\n' > /usr/local/bin/platform-to-zig-target.sh \
    && chmod +x /usr/local/bin/platform-to-zig-target.sh

# Build for musl target with TLS using wolfSSL (static linking)
# NOTE: wolfSSL supports static linking, enabling TLS in static musl builds
# Binary will be named zigcat-wolfssl to distinguish from OpenSSL builds
#
# IMPORTANT: This build uses LD_PRELOAD shim to work around faccessat2 syscall
#            blocking on Docker < 20.10.6 or libseccomp < 2.4.4
#            Zig 0.15.1 uses faccessat2 which older Docker versions block (errno 38 / ENOSYS)
# NOTE: Cache cleaned after build to prevent corruption in subsequent builds
RUN ZIG_TARGET=${ZIG_TARGET:-$(/usr/local/bin/platform-to-zig-target.sh "$TARGETPLATFORM")} && \
    echo "Building for target: $ZIG_TARGET (platform: $TARGETPLATFORM)" && \
    echo "Using LD_PRELOAD shim to intercept faccessat2 syscalls" && \
    export LD_PRELOAD=/usr/local/lib/faccessat2_shim.so && \
    if [ -n "$BUILD_OPTIONS" ]; then \
        echo "Build options: $BUILD_OPTIONS" && \
        zig build -Dtarget="$ZIG_TARGET" $BUILD_OPTIONS; \
    else \
        echo "Using default: ReleaseSmall, strip, static, wolfSSL TLS" && \
        zig build -Dtarget="$ZIG_TARGET" -Doptimize=ReleaseSmall -Dstrip=true -Dstatic=true -Dtls=true -Dtls-backend=wolfssl; \
    fi && \
    unset LD_PRELOAD && \
    rm -rf "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR"

# Run unit tests (skip for cross-compilation)
# NOTE: LD_PRELOAD shim used to intercept faccessat2 syscalls
# NOTE: Cache cleaned after tests to prevent corruption in subsequent builds
RUN ZIG_TARGET=${ZIG_TARGET:-$(/usr/local/bin/platform-to-zig-target.sh "$TARGETPLATFORM")} && \
    NATIVE_TARGET=$(case "$(uname -m)" in \
        x86_64) echo "x86_64-linux-musl";; \
        aarch64) echo "aarch64-linux-musl";; \
        *) echo "unknown";; \
    esac) && \
    if [ "$ZIG_TARGET" = "$NATIVE_TARGET" ]; then \
        echo "Running native tests" && \
        export LD_PRELOAD=/usr/local/lib/faccessat2_shim.so && \
        if [ -n "$BUILD_OPTIONS" ]; then \
            zig build test $BUILD_OPTIONS; \
        else \
            zig build test -Doptimize=ReleaseSmall -Dstatic=true -Dtls=true -Dtls-backend=wolfssl; \
        fi && \
        unset LD_PRELOAD; \
    else \
        echo "Skipping tests for cross-compilation (target: $ZIG_TARGET, native: $NATIVE_TARGET)"; \
    fi && \
    rm -rf "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR"

# Export stage for artifacts
FROM scratch AS artifacts
COPY --from=builder /build/zig-out/bin/ /bin/
COPY --from=builder /build/zig-out/ /artifacts/

# Runtime stage for testing
FROM ${RUNTIME_BASE_IMAGE} AS runtime

# Install runtime dependencies for testing
RUN apk add --no-cache \
    netcat-openbsd \
    curl \
    wget \
    bash \
    file \
    ca-certificates

# Copy built binary
COPY --from=builder /build/zig-out/bin/zigcat-wolfssl /usr/local/bin/

# Verify static linking and TLS support
RUN echo "=== Binary Information ===" && \
    file /usr/local/bin/zigcat-wolfssl && \
    ls -lh /usr/local/bin/zigcat-wolfssl && \
    echo "=== Static Linkage Verification ===" && \
    (ldd /usr/local/bin/zigcat-wolfssl 2>&1 | grep -q "not a dynamic executable" && echo "✓ True static binary (no dependencies)") || echo "⚠ Has dynamic dependencies" && \
    echo "=== Version Check ===" && \
    /usr/local/bin/zigcat-wolfssl --version && \
    echo "=== TLS Support Check ===" && \
    (strings /usr/local/bin/zigcat-wolfssl | grep -qi "wolfssl" && echo "✓ wolfSSL TLS support detected") || echo "⚠ wolfSSL not detected" && \
    echo "" && \
    echo "⚠️  LICENSE NOTICE: This binary includes wolfSSL (GPLv2 license)" && \
    echo "    Distribution of this binary requires GPL compliance."

# Create test directories
RUN mkdir -p /test-results /test-logs /artifacts
WORKDIR /test

# Default command
CMD ["/bin/bash", "-c", "sleep infinity"]
# Install Zig version resolver helper
COPY --from=builder /usr/local/bin/resolve-zig-version /usr/local/bin/resolve-zig-version
RUN chmod +x /usr/local/bin/resolve-zig-version
