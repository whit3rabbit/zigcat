# Multi-stage Dockerfile for Alpine/musl static builds with wolfSSL
# IMPORTANT: Use TARGETPLATFORM for native compilation (not cross-compilation)
# This ensures wolfSSL libraries match the target architecture
FROM --platform=$TARGETPLATFORM alpine:3.18 AS builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG ZIG_VERSION=0.15.1

# Install system dependencies
RUN apk add --no-cache \
    wget \
    xz \
    ca-certificates \
    bash \
    wolfssl-dev

# Install Zig compiler (architecture-aware)
RUN ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac) && \
    wget -q https://ziglang.org/download/${ZIG_VERSION}/zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    tar -xf zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    mv zig-${ARCH}-linux-${ZIG_VERSION} /opt/zig && \
    rm zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Set Zig cache directories for better control and performance
# These can be mounted as volumes or tmpfs for faster builds
ENV ZIG_LOCAL_CACHE_DIR=/build/.zig-cache
ENV ZIG_GLOBAL_CACHE_DIR=/tmp/zig-global-cache

# Create cache directories
RUN mkdir -p "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR"

# Create build directory
WORKDIR /build

# Copy source code
COPY . .

# Platform-to-Zig target mapping script for musl
RUN printf '#!/bin/bash\n\
case "$1" in\n\
  "linux/amd64") echo "x86_64-linux-musl" ;;\n\
  "linux/arm64") echo "aarch64-linux-musl" ;;\n\
  *) echo "x86_64-linux-musl" ;;\n\
esac\n' > /usr/local/bin/platform-to-zig-target.sh \
    && chmod +x /usr/local/bin/platform-to-zig-target.sh

# Build for musl target with TLS using wolfSSL (static linking)
# NOTE: wolfSSL supports static linking, enabling TLS in static musl builds
# Binary will be named zigcat-wolfssl to distinguish from OpenSSL builds
# Build natively (no cross-compilation) to avoid architecture mismatch issues
#
# Build native musl binary with TLS (wolfSSL backend)
# NOTE: Cache mounts disabled due to Zig 0.15.1 faccessat2 incompatibility with Docker overlayfs
#       See: https://github.com/ziglang/zig/issues/18180
RUN echo "Building native musl binary with TLS (wolfSSL backend, static)" && \
    zig build -Drelease=true -Dstatic=true -Dtls=true -Dtls-backend=wolfssl

# Run unit tests (native, TLS enabled with wolfSSL, static)
RUN echo "Running native tests with TLS (wolfSSL backend, static)" && \
    zig build test -Drelease=true -Dstatic=true -Dtls=true -Dtls-backend=wolfssl

# Export stage for artifacts
FROM scratch AS artifacts
COPY --from=builder /build/zig-out/bin/ /bin/
COPY --from=builder /build/zig-out/ /artifacts/

# Runtime stage for testing with musl
FROM alpine:3.18 AS runtime

# Install runtime dependencies for testing
RUN apk add --no-cache \
    netcat-openbsd \
    curl \
    wget \
    bash \
    bc \
    procps \
    iproute2 \
    iputils \
    busybox-extras \
    socat \
    strace \
    tcpdump \
    bind-tools \
    ca-certificates

# Install Zig for test execution (architecture-aware)
ARG ZIG_VERSION=0.15.1
RUN ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac) && \
    wget -q https://ziglang.org/download/${ZIG_VERSION}/zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    tar -xf zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    mv zig-${ARCH}-linux-${ZIG_VERSION} /opt/zig && \
    rm zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Create test user for security tests
RUN adduser -D -s /bin/bash testuser

# Copy built binaries
COPY --from=builder /build/zig-out/bin/ /usr/local/bin/

# Create test directories
RUN mkdir -p /test-results /test-logs /artifacts
WORKDIR /test

# Default command
CMD ["/bin/bash", "-c", "sleep infinity"]
