# Multi-stage Dockerfile for Alpine/musl cross-compilation
FROM --platform=$BUILDPLATFORM alpine:3.18 AS builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG ZIG_VERSION=0.15.1

# Install system dependencies
RUN apk add --no-cache \
    wget \
    xz \
    ca-certificates \
    bash \
    openssl-dev \
    openssl-static

# Install Zig compiler (architecture-aware)
RUN ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac) && \
    wget -q https://ziglang.org/download/${ZIG_VERSION}/zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    tar -xf zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    mv zig-${ARCH}-linux-${ZIG_VERSION} /opt/zig && \
    rm zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Create build directory
WORKDIR /build

# Copy source code
COPY . .

# Platform-to-Zig target mapping script for musl
RUN echo '#!/bin/bash\n\
case "$1" in\n\
  "linux/amd64") echo "x86_64-linux-musl" ;;\n\
  "linux/arm64") echo "aarch64-linux-musl" ;;\n\
  *) echo "x86_64-linux-musl" ;;\n\
esac' > /usr/local/bin/platform-to-zig-target.sh \
    && chmod +x /usr/local/bin/platform-to-zig-target.sh

# Build for musl target with TLS (dynamic linking)
# NOTE: -Dstatic=true is incompatible with -Dtls=true per build.zig constraints
RUN ZIG_TARGET=$(platform-to-zig-target.sh $TARGETPLATFORM) && \
    echo "Building for Zig target: $ZIG_TARGET with TLS enabled (dynamic)" && \
    zig build -Dtarget=$ZIG_TARGET -Drelease=true -Dtls=true

# Run unit tests
RUN ZIG_TARGET=$(platform-to-zig-target.sh $TARGETPLATFORM) && \
    echo "Running tests for Zig target: $ZIG_TARGET with TLS enabled" && \
    zig build test -Dtarget=$ZIG_TARGET -Drelease=true -Dtls=true

# Export stage for artifacts
FROM scratch AS artifacts
COPY --from=builder /build/zig-out/bin/ /bin/
COPY --from=builder /build/zig-out/ /artifacts/

# Runtime stage for testing with musl
FROM alpine:3.18 AS runtime

# Install runtime dependencies for testing
RUN apk add --no-cache \
    netcat-openbsd \
    curl \
    wget \
    bash \
    bc \
    procps \
    iproute2 \
    iputils \
    busybox-extras \
    socat \
    strace \
    tcpdump \
    bind-tools \
    ca-certificates

# Install Zig for test execution (architecture-aware)
ARG ZIG_VERSION=0.15.1
RUN ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac) && \
    wget -q https://ziglang.org/download/${ZIG_VERSION}/zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    tar -xf zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz && \
    mv zig-${ARCH}-linux-${ZIG_VERSION} /opt/zig && \
    rm zig-${ARCH}-linux-${ZIG_VERSION}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Create test user for security tests
RUN adduser -D -s /bin/bash testuser

# Copy built binaries
COPY --from=builder /build/zig-out/bin/ /usr/local/bin/

# Create test directories
RUN mkdir -p /test-results /test-logs /artifacts
WORKDIR /test

# Default command
CMD ["/bin/bash", "-c", "sleep infinity"]
