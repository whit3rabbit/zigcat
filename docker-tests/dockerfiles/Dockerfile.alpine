# syntax=docker/dockerfile:1.4
# Multi-stage Dockerfile for Alpine/musl static builds with wolfSSL
# IMPORTANT: Use TARGETPLATFORM for native compilation (not cross-compilation)
# This ensures wolfSSL libraries match the target architecture
ARG BASE_IMAGE=alpine:3.18
ARG RUNTIME_BASE_IMAGE=alpine:3.18
FROM --platform=$TARGETPLATFORM ${BASE_IMAGE} AS builder

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG ZIG_VERSION=latest
ARG DEFAULT_ZIG_VERSION=0.15.1
ARG BUILD_OPTIONS=""

# Install system dependencies
# NOTE: Use 'wolfssl' package from community repo (not 'wolfssl-dev')
# wolfssl package provides the library needed for TLS support
RUN apk add --no-cache \
    wget \
    xz \
    ca-certificates \
    bash \
    wolfssl

# Install Zig version resolver helper
COPY docker-tests/scripts/resolve-zig-version.sh /usr/local/bin/resolve-zig-version
RUN chmod +x /usr/local/bin/resolve-zig-version

# Install Zig compiler (architecture-aware)
RUN set -eux; \
    ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac); \
    ZIG_ACTUAL=$(DEFAULT_ZIG_VERSION=$DEFAULT_ZIG_VERSION resolve-zig-version "$ZIG_VERSION"); \
    echo "Using Zig version ${ZIG_ACTUAL}"; \
    wget -q https://ziglang.org/download/${ZIG_ACTUAL}/zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz; \
    tar -xf zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz; \
    mv zig-${ARCH}-linux-${ZIG_ACTUAL} /opt/zig; \
    rm zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Set Zig cache directories for better control and performance
# Using /build for local cache (persistent across build steps)
# Using /tmp for global cache (temporary but accessible)
# This prevents cache corruption issues seen with overlayfs + faccessat2
ENV ZIG_LOCAL_CACHE_DIR=/build/.zig-cache
ENV ZIG_GLOBAL_CACHE_DIR=/tmp/zig-global-cache

# Create cache directories with proper permissions
# CRITICAL: Ensure cache directories exist before first build command
RUN mkdir -p "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR" && \
    chmod -R 777 "$ZIG_LOCAL_CACHE_DIR" "$ZIG_GLOBAL_CACHE_DIR"

# Create build directory
WORKDIR /build

# Copy source code
COPY . .

# Platform-to-Zig target mapping script for musl
RUN printf '#!/bin/bash\n\
case "$1" in\n\
  "linux/amd64") echo "x86_64-linux-musl" ;;\n\
  "linux/arm64") echo "aarch64-linux-musl" ;;\n\
  *) echo "x86_64-linux-musl" ;;\n\
esac\n' > /usr/local/bin/platform-to-zig-target.sh \
    && chmod +x /usr/local/bin/platform-to-zig-target.sh

# Build for musl target with TLS using wolfSSL (static linking)
# NOTE: wolfSSL supports static linking, enabling TLS in static musl builds
# Binary will be named zigcat-wolfssl to distinguish from OpenSSL builds
# Build natively (no cross-compilation) to avoid architecture mismatch issues
#
# Build native musl binary with TLS (wolfSSL backend)
# NOTE: Known issue with Zig 0.15.1 + Docker BuildKit + emulated AMD64 on ARM64 hosts
#       The faccessat2 syscall may fail with errno 38 (ENOSYS) on some platforms
#       ARM64 builds work reliably, AMD64 builds may fail on Apple Silicon hosts
#       See: https://github.com/ziglang/zig/issues/18180
RUN echo "Building native musl binary" && \
    if [ -n "$BUILD_OPTIONS" ]; then \
        echo "Build options: $BUILD_OPTIONS" && \
        zig build $BUILD_OPTIONS --cache-dir "$ZIG_LOCAL_CACHE_DIR" --global-cache-dir "$ZIG_GLOBAL_CACHE_DIR"; \
    else \
        echo "Using default: wolfSSL backend, static, ReleaseSmall" && \
        zig build -Doptimize=ReleaseSmall -Dstatic=true -Dtls=true -Dtls-backend=wolfssl --cache-dir "$ZIG_LOCAL_CACHE_DIR" --global-cache-dir "$ZIG_GLOBAL_CACHE_DIR"; \
    fi

# Run unit tests
RUN echo "Running native tests" && \
    if [ -n "$BUILD_OPTIONS" ]; then \
        zig build test $BUILD_OPTIONS --cache-dir "$ZIG_LOCAL_CACHE_DIR" --global-cache-dir "$ZIG_GLOBAL_CACHE_DIR"; \
    else \
        zig build test -Doptimize=ReleaseSmall -Dstatic=true -Dtls=true -Dtls-backend=wolfssl --cache-dir "$ZIG_LOCAL_CACHE_DIR" --global-cache-dir "$ZIG_GLOBAL_CACHE_DIR"; \
    fi

# Export stage for artifacts
FROM scratch AS artifacts
COPY --from=builder /build/zig-out/bin/ /bin/
COPY --from=builder /build/zig-out/ /artifacts/

FROM ${RUNTIME_BASE_IMAGE} AS runtime

# Install runtime dependencies for testing
RUN apk add --no-cache \
    netcat-openbsd \
    curl \
    wget \
    bash \
    bc \
    procps \
    iproute2 \
    iputils \
    busybox-extras \
    socat \
    strace \
    tcpdump \
    bind-tools \
    ca-certificates

# Install Zig for test execution (architecture-aware)
ARG ZIG_VERSION=latest
ARG DEFAULT_ZIG_VERSION=0.15.1
COPY --from=builder /usr/local/bin/resolve-zig-version /usr/local/bin/resolve-zig-version
RUN chmod +x /usr/local/bin/resolve-zig-version
RUN set -eux; \
    ARCH=$(case "$(uname -m)" in x86_64) echo "x86_64";; aarch64) echo "aarch64";; *) echo "x86_64";; esac); \
    ZIG_ACTUAL=$(DEFAULT_ZIG_VERSION=$DEFAULT_ZIG_VERSION resolve-zig-version "$ZIG_VERSION"); \
    echo "Using Zig version ${ZIG_ACTUAL}"; \
    wget -q https://ziglang.org/download/${ZIG_ACTUAL}/zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz; \
    tar -xf zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz; \
    mv zig-${ARCH}-linux-${ZIG_ACTUAL} /opt/zig; \
    rm zig-${ARCH}-linux-${ZIG_ACTUAL}.tar.xz

ENV PATH="/opt/zig:$PATH"

# Create test user for security tests
RUN adduser -D -s /bin/bash testuser

# Copy built binaries
COPY --from=builder /build/zig-out/bin/ /usr/local/bin/

# Create test directories
RUN mkdir -p /test-results /test-logs /artifacts
WORKDIR /test

# Default command
CMD ["/bin/bash", "-c", "sleep infinity"]
