# GitHub Actions workflow for ZigCat Docker Test Suite
# Place this file in .github/workflows/docker-tests.yml

name: Docker Cross-Platform Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Test configuration
  ENABLE_CACHING: true
  PRESERVE_ARTIFACTS: true
  VERBOSE: false

jobs:
  docker-tests:
    name: Cross-Platform Docker Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        test-suite: [basic, protocols, features]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for cache key generation
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        platforms: linux/amd64,linux/arm64
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Cache test results
      uses: actions/cache@v3
      with:
        path: docker-tests/cache
        key: test-cache-${{ hashFiles('src/**', 'build.zig', 'docker-tests/configs/**', 'docker-tests/dockerfiles/**') }}
        restore-keys: |
          test-cache-
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip jq
        pip3 install --user pyyaml
    
    - name: Run Docker tests with CI integration
      run: |
        chmod +x docker-tests/scripts/ci-integration.sh
        docker-tests/scripts/ci-integration.sh run \
          --ci-system github \
          --build-id ${{ github.run_id }} \
          --branch-name ${{ github.ref_name }} \
          --commit-sha ${{ github.sha }} \
          --junit-output test-results-${{ matrix.test-suite }}.xml \
          --ci-artifacts-dir ci-artifacts-${{ matrix.test-suite }} \
          --verbose
      env:
        SELECTED_TEST_SUITES: ${{ matrix.test-suite }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          test-results-${{ matrix.test-suite }}.xml
          ci-artifacts-${{ matrix.test-suite }}/
        retention-days: 30
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Docker Tests (${{ matrix.test-suite }})
        path: test-results-${{ matrix.test-suite }}.xml
        reporter: java-junit
        fail-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.test-suite == 'basic'
      with:
        files: ci-artifacts-${{ matrix.test-suite }}/reports/coverage.xml
        flags: docker-tests
        name: docker-cross-platform
    
    - name: Comment PR with test results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = 'ci-artifacts-${{ matrix.test-suite }}/reports/test-summary-*.txt';
          
          try {
            const { execSync } = require('child_process');
            const summaryFile = execSync(`ls ${path} | head -1`, { encoding: 'utf8' }).trim();
            
            if (fs.existsSync(summaryFile)) {
              const summary = fs.readFileSync(summaryFile, 'utf8');
              const body = `## Docker Test Results (${{ matrix.test-suite }})\n\n\`\`\`\n${summary}\n\`\`\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          } catch (error) {
            console.log('Could not find test summary file');
          }

  # Aggregate results from all test suites
  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: docker-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: all-artifacts/
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip jq
    
    - name: Aggregate test results
      run: |
        # Combine all test results
        mkdir -p combined-results combined-artifacts combined-reports
        
        for suite in basic protocols features; do
          if [ -d "all-artifacts/test-results-$suite/ci-artifacts-$suite" ]; then
            cp -r all-artifacts/test-results-$suite/ci-artifacts-$suite/results/* combined-results/ 2>/dev/null || true
            cp -r all-artifacts/test-results-$suite/ci-artifacts-$suite/artifacts/* combined-artifacts/ 2>/dev/null || true
            cp -r all-artifacts/test-results-$suite/ci-artifacts-$suite/reports/* combined-reports/ 2>/dev/null || true
          fi
        done
        
        # Generate combined report
        chmod +x docker-tests/scripts/generate-reports.sh
        docker-tests/scripts/generate-reports.sh \
          --results-dir combined-results \
          --artifacts-dir combined-artifacts \
          --output-dir combined-reports \
          --formats "json html text"
    
    - name: Generate trend analysis
      run: |
        if [ -d "combined-reports" ] && [ $(ls combined-reports/test-report-*.json 2>/dev/null | wc -l) -gt 1 ]; then
          chmod +x docker-tests/scripts/trend-analyzer.py
          python3 docker-tests/scripts/trend-analyzer.py \
            --reports-dir combined-reports \
            --output-dir combined-reports \
            --formats "json html"
        fi
    
    - name: Upload combined results
      uses: actions/upload-artifact@v3
      with:
        name: combined-test-results
        path: |
          combined-results/
          combined-artifacts/
          combined-reports/
        retention-days: 90
    
    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          combined-artifacts/*/zigcat
          combined-reports/test-report-*.json
          combined-reports/test-report-*.html
        body: |
          ## ZigCat Release ${{ github.ref_name }}
          
          Cross-platform binaries and test results included.
          
          ### Test Results Summary
          See attached HTML report for detailed test results across all platforms.
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        name: test-results-basic
        path: test-artifacts/
    
    - name: Run security scan on binaries
      run: |
        # Scan built binaries for security issues
        for binary in test-artifacts/ci-artifacts-basic/artifacts/*/zigcat; do
          if [ -f "$binary" ]; then
            echo "Scanning $binary"
            # Add your security scanning tools here
            # Example: checksec --file="$binary"
          fi
        done
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: security-scan-results/
        retention-days: 30