# GitLab CI configuration for ZigCat Docker Test Suite
# Place this file as .gitlab-ci.yml in your repository root

stages:
  - build
  - test
  - report
  - deploy

variables:
  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # Test configuration
  ENABLE_CACHING: "true"
  PRESERVE_ARTIFACTS: "true"
  VERBOSE: "false"
  
  # Cache settings
  CACHE_KEY: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
  CACHE_FALLBACK_KEY: "${CI_COMMIT_REF_SLUG}"

# Global cache configuration
cache:
  key: "${CACHE_KEY}"
  paths:
    - docker-tests/cache/
    - .buildx-cache/
  policy: pull-push

# Build stage - prepare Docker environment
prepare:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
    - docker buildx create --use --driver docker-container
  script:
    - echo "Docker environment prepared"
    - docker buildx ls
  only:
    - main
    - develop
    - merge_requests
    - tags

# Test jobs for different test suites
.test_template: &test_template
  stage: test
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - apk add --no-cache python3 py3-pip jq bash git
    - pip3 install pyyaml
    - docker buildx create --use --driver docker-container
    - chmod +x docker-tests/scripts/ci-integration.sh
  script:
    - |
      docker-tests/scripts/ci-integration.sh run \
        --ci-system gitlab \
        --build-id ${CI_PIPELINE_ID} \
        --branch-name ${CI_COMMIT_REF_NAME} \
        --commit-sha ${CI_COMMIT_SHA} \
        --junit-output test-results-${TEST_SUITE}.xml \
        --ci-artifacts-dir ci-artifacts-${TEST_SUITE} \
        --verbose
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - test-results-${TEST_SUITE}.xml
      - ci-artifacts-${TEST_SUITE}/
    reports:
      junit: test-results-${TEST_SUITE}.xml
  coverage: '/Coverage: \d+\.\d+%/'
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Individual test suite jobs
test:basic:
  <<: *test_template
  variables:
    TEST_SUITE: "basic"
    SELECTED_TEST_SUITES: "basic"
  only:
    - main
    - develop
    - merge_requests
    - tags

test:protocols:
  <<: *test_template
  variables:
    TEST_SUITE: "protocols"
    SELECTED_TEST_SUITES: "protocols"
  only:
    - main
    - develop
    - merge_requests
    - tags

test:features:
  <<: *test_template
  variables:
    TEST_SUITE: "features"
    SELECTED_TEST_SUITES: "features"
  only:
    - main
    - develop
    - merge_requests
    - tags

# Nightly comprehensive test
test:nightly:
  <<: *test_template
  variables:
    TEST_SUITE: "comprehensive"
    SELECTED_TEST_SUITES: "basic,protocols,features"
    VERBOSE: "true"
  script:
    - |
      docker-tests/scripts/ci-integration.sh run \
        --ci-system gitlab \
        --build-id ${CI_PIPELINE_ID} \
        --branch-name ${CI_COMMIT_REF_NAME} \
        --commit-sha ${CI_COMMIT_SHA} \
        --junit-output test-results-comprehensive.xml \
        --ci-artifacts-dir ci-artifacts-comprehensive \
        --verbose
  artifacts:
    when: always
    expire_in: 90 days
    paths:
      - test-results-comprehensive.xml
      - ci-artifacts-comprehensive/
    reports:
      junit: test-results-comprehensive.xml
  only:
    - schedules
    - main

# Report aggregation stage
aggregate_results:
  stage: report
  image: python:3.11-alpine
  dependencies:
    - test:basic
    - test:protocols
    - test:features
  before_script:
    - apk add --no-cache jq bash git
  script:
    - |
      # Combine all test results
      mkdir -p combined-results combined-artifacts combined-reports
      
      for suite in basic protocols features; do
        if [ -d "ci-artifacts-$suite" ]; then
          cp -r ci-artifacts-$suite/results/* combined-results/ 2>/dev/null || true
          cp -r ci-artifacts-$suite/artifacts/* combined-artifacts/ 2>/dev/null || true
          cp -r ci-artifacts-$suite/reports/* combined-reports/ 2>/dev/null || true
        fi
      done
      
      # Generate combined report
      chmod +x docker-tests/scripts/generate-reports.sh
      docker-tests/scripts/generate-reports.sh \
        --results-dir combined-results \
        --artifacts-dir combined-artifacts \
        --output-dir combined-reports \
        --formats "json html text"
      
      # Generate trend analysis if we have historical data
      if [ -d "combined-reports" ] && [ $(ls combined-reports/test-report-*.json 2>/dev/null | wc -l) -gt 1 ]; then
        python3 docker-tests/scripts/trend-analyzer.py \
          --reports-dir combined-reports \
          --output-dir combined-reports \
          --formats "json html"
      fi
  artifacts:
    when: always
    expire_in: 90 days
    paths:
      - combined-results/
      - combined-artifacts/
      - combined-reports/
    reports:
      junit: test-results-*.xml
  only:
    - main
    - develop
    - merge_requests
    - tags

# Generate pages for GitLab Pages
pages:
  stage: deploy
  image: alpine:latest
  dependencies:
    - aggregate_results
  script:
    - mkdir public
    - |
      # Copy HTML reports to public directory
      if [ -d "combined-reports" ]; then
        cp combined-reports/*.html public/ 2>/dev/null || true
        
        # Create index page
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
          <title>ZigCat Test Reports</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .report-list { list-style-type: none; padding: 0; }
            .report-list li { margin: 10px 0; }
            .report-list a { text-decoration: none; color: #007bff; }
            .report-list a:hover { text-decoration: underline; }
          </style>
        </head>
        <body>
          <h1>ZigCat Test Reports</h1>
          <ul class="report-list">
        EOF
        
        # Add links to all HTML reports
        for report in public/*.html; do
          if [ "$report" != "public/index.html" ] && [ -f "$report" ]; then
            filename=$(basename "$report")
            echo "            <li><a href=\"$filename\">$filename</a></li>" >> public/index.html
          fi
        done
        
        cat >> public/index.html << 'EOF'
          </ul>
          <p>Generated by GitLab CI/CD Pipeline</p>
        </body>
        </html>
        EOF
      fi
  artifacts:
    paths:
      - public
  only:
    - main

# Security scanning
security_scan:
  stage: test
  image: docker:24-dind
  services:
    - docker:24-dind
  dependencies:
    - test:basic
  script:
    - |
      # Install security scanning tools
      apk add --no-cache curl
      
      # Scan built binaries
      for binary in ci-artifacts-basic/artifacts/*/zigcat; do
        if [ -f "$binary" ]; then
          echo "Scanning $binary for security issues"
          # Add your security scanning commands here
          file "$binary"
          strings "$binary" | head -20
        fi
      done
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - security-scan-results/
  allow_failure: true
  only:
    - main
    - tags

# Performance benchmarking
performance_benchmark:
  stage: test
  image: docker:24-dind
  services:
    - docker:24-dind
  dependencies:
    - test:basic
  script:
    - |
      # Run performance benchmarks on built binaries
      mkdir -p benchmark-results
      
      for binary in ci-artifacts-basic/artifacts/*/zigcat; do
        if [ -f "$binary" ]; then
          platform=$(dirname "$binary" | xargs basename)
          echo "Benchmarking $binary ($platform)"
          
          # Basic performance test
          time "$binary" --help > /dev/null 2>&1 || true
          
          # Binary size analysis
          ls -lh "$binary" >> benchmark-results/binary-sizes.txt
        fi
      done
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - benchmark-results/
  allow_failure: true
  only:
    - main
    - tags

# Release job for tags
release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - aggregate_results
  script:
    - |
      # Prepare release assets
      mkdir -p release-assets
      
      # Copy binaries
      for binary in combined-artifacts/*/zigcat; do
        if [ -f "$binary" ]; then
          platform=$(dirname "$binary" | xargs basename)
          cp "$binary" "release-assets/zigcat-${platform}"
        fi
      done
      
      # Copy reports
      cp combined-reports/test-report-*.html release-assets/ 2>/dev/null || true
      cp combined-reports/test-report-*.json release-assets/ 2>/dev/null || true
  release:
    name: 'ZigCat Release $CI_COMMIT_TAG'
    description: |
      ## ZigCat Release $CI_COMMIT_TAG
      
      Cross-platform binaries and test results.
      
      ### Test Results
      All tests passed across supported platforms.
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Test Report (HTML)'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/combined-reports/test-report-latest.html'
        - name: 'Test Report (JSON)'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/combined-reports/test-report-latest.json'
  artifacts:
    paths:
      - release-assets/
  only:
    - tags

# Cleanup old artifacts
cleanup:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Cleanup job - artifacts are automatically managed by GitLab"
  only:
    - schedules
  when: manual