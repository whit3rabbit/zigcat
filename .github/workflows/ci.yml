name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    env:
      ZIG_VERSION: 0.15.1
      ZIG_GLOBAL_CACHE_DIR: ${{ github.workspace }}/zig-global-cache
    steps:
      - uses: actions/checkout@v4

      - name: Set up Zig
        uses: mlugg/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Install OpenSSL and wolfSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libwolfssl-dev pkg-config

      - name: Cache Zig build artifacts
        uses: actions/cache@v3
        with:
          path: |
            zig-cache
            zig-out
            ${{ env.ZIG_GLOBAL_CACHE_DIR }}
          key: ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig', 'src/**/*.zig', 'tests/**/*.zig') }}
          restore-keys: |
            ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-

      - name: Prime cache directories
        shell: bash
        run: |
          mkdir -p "zig-cache" "zig-out" "$ZIG_GLOBAL_CACHE_DIR"

      - name: Smoke test suite
        shell: bash
        run: zig build test -Doptimize=ReleaseSafe

      - name: Test wolfSSL build
        shell: bash
        run: |
          echo "Testing wolfSSL backend build..."
          zig build -Dtls=true -Dtls-backend=wolfssl
          ls -lh zig-out/bin/zigcat-wolfssl
          ./zig-out/bin/zigcat-wolfssl --version
          if ./zig-out/bin/zigcat-wolfssl --help 2>&1 | grep -q "SSL/TLS"; then
            echo "✓ wolfSSL TLS support verified"
          else
            echo "⚠ WARNING: TLS support not found in wolfSSL build"
            exit 1
          fi

  test:
    name: Full Test Matrix
    needs: smoke
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20  # Kill job after 20 minutes (prevents 43+ minute hangs)
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: Ubuntu
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y libssl-dev pkg-config
            commands: |
              zig build test -Doptimize=ReleaseSafe
              zig build test-timeout -Doptimize=ReleaseSafe
              zig build test-udp -Doptimize=ReleaseSafe
              zig build test-zero-io -Doptimize=ReleaseSafe
              zig build test-quit-eof -Doptimize=ReleaseSafe
              zig build test-platform -Doptimize=ReleaseSafe
              zig build test-portscan-features -Doptimize=ReleaseSafe
              zig build test-portscan-uring -Doptimize=ReleaseSafe
              zig build test-validation -Doptimize=ReleaseSafe
              zig build test-parallel-scan -Doptimize=ReleaseSafe
              zig build test-ssl -Doptimize=ReleaseSafe
          - os: macos-latest
            label: macOS
            install_deps: |
              brew install openssl@3 pkg-config
            commands: |
              zig build test -Doptimize=ReleaseSafe
              zig build test-timeout -Doptimize=ReleaseSafe
              zig build test-udp -Doptimize=ReleaseSafe
              zig build test-zero-io -Doptimize=ReleaseSafe
              zig build test-quit-eof -Doptimize=ReleaseSafe
              zig build test-platform -Doptimize=ReleaseSafe
              zig build test-portscan-features -Doptimize=ReleaseSafe
              zig build test-validation -Doptimize=ReleaseSafe
              zig build test-parallel-scan -Doptimize=ReleaseSafe
              zig build test-ssl -Doptimize=ReleaseSafe
          - os: windows-latest
            label: Windows
            install_deps: |
              # Install OpenSSL via vcpkg (GitHub Actions runners have vcpkg pre-installed)
              echo "Installing OpenSSL via vcpkg..."
              vcpkg install openssl:x64-windows

              # Integrate vcpkg with MSBuild (makes libraries discoverable)
              vcpkg integrate install

              # Set VCPKG_ROOT for build.zig
              echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

              # Debug: Show vcpkg installation structure
              echo "=== vcpkg Installation Debug Info ==="
              echo "VCPKG_INSTALLATION_ROOT: $VCPKG_INSTALLATION_ROOT"

              echo -e "\n--- Checking installed directory structure ---"
              if [ -d "$VCPKG_INSTALLATION_ROOT/installed/x64-windows" ]; then
                echo "✓ x64-windows directory exists"
                ls -la "$VCPKG_INSTALLATION_ROOT/installed/x64-windows/"
              else
                echo "✗ x64-windows directory NOT found"
              fi

              echo -e "\n--- Checking lib directory contents ---"
              if [ -d "$VCPKG_INSTALLATION_ROOT/installed/x64-windows/lib" ]; then
                echo "✓ lib directory exists"
                echo "Full contents:"
                ls -lah "$VCPKG_INSTALLATION_ROOT/installed/x64-windows/lib/" | head -30
                echo -e "\nSSL-related files:"
                find "$VCPKG_INSTALLATION_ROOT/installed/x64-windows/lib" -name "*ssl*" -o -name "*crypto*" 2>/dev/null || echo "No SSL files found with find"
              else
                echo "✗ lib directory NOT found"
              fi

              echo -e "\n--- Checking include directory ---"
              if [ -d "$VCPKG_INSTALLATION_ROOT/installed/x64-windows/include/openssl" ]; then
                echo "✓ OpenSSL headers found"
                ls "$VCPKG_INSTALLATION_ROOT/installed/x64-windows/include/openssl/" | head -10
              else
                echo "✗ OpenSSL headers NOT found"
              fi

              echo -e "\n--- vcpkg list output ---"
              vcpkg list | grep -i openssl || echo "OpenSSL not in vcpkg list"

              echo "=== End Debug Info ==="
            commands: |
              zig build test -Doptimize=ReleaseSafe
              zig build test-timeout -Doptimize=ReleaseSafe
              zig build test-udp -Doptimize=ReleaseSafe
              zig build test-validation -Doptimize=ReleaseSafe
              zig build test-platform -Doptimize=ReleaseSafe
              zig build test-ssl -Doptimize=ReleaseSafe
    env:
      ZIG_VERSION: 0.15.1
      ZIG_GLOBAL_CACHE_DIR: ${{ github.workspace }}/zig-global-cache
    steps:
      - uses: actions/checkout@v4

      - name: Set up Zig
        uses: mlugg/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Install dependencies
        shell: bash
        run: |
          ${{ matrix.install_deps }}

      - name: Cache Zig build artifacts
        uses: actions/cache@v3
        with:
          path: |
            zig-cache
            zig-out
            ${{ env.ZIG_GLOBAL_CACHE_DIR }}
          key: ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-${{ hashFiles('build.zig', 'src/**/*.zig', 'tests/**/*.zig') }}
          restore-keys: |
            ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}-

      - name: Prime cache directories
        shell: bash
        run: |
          mkdir -p "zig-cache" "zig-out" "$ZIG_GLOBAL_CACHE_DIR"

      - name: Run ${{ matrix.label }} tests
        shell: bash
        timeout-minutes: 15  # Per-step timeout (allows 15 min for all tests)
        run: |
          set -euo pipefail
          while IFS= read -r cmd; do
            if [[ -n "$cmd" ]]; then
              echo "Running: $cmd"
              # Add 5-minute timeout per individual test command
              timeout 300 $cmd || echo "Test $cmd failed but continuing..."
            fi
          done <<'EOF'
          ${{ matrix.commands }}
          EOF

      - name: Build artifact (for testing)
        shell: bash
        run: |
          # Build with TLS enabled on all platforms
          zig build -Dstrip=true
          ls -lh zig-out/bin/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: zigcat-${{ matrix.label }}
          path: zig-out/bin/zigcat*
          retention-days: 7
