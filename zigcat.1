.TH ZIGCAT 1 "October 2025" "zigcat 0.1.0" "User Commands"
.SH NAME
zigcat \- Concatenate and redirect sockets
.SH SYNOPSIS
.B zigcat
[\fIoptions\fR] \fIhost\fR \fIport\fR
.br
.B zigcat
.BR -l " | " --listen
[\fIoptions\fR] [\fIport\fR]
.br
.B zigcat
.BR -U " " \fIpath\fR
[\fIoptions\fR]
.br
.B zigcat
.BR -l " | " --listen
.BR -U " " \fIpath\fR
[\fIoptions\fR]
.br
.B zigcat
.BR -z " | " --zero-io
[\fIscan-options\fR] \fIhost\fR \fB{\fR\fIport\fR\fB|\fR\fIrange\fR\fB}\fR
.br
.B zigcat
.BR -l " | " --listen
[\fIoptions\fR]
.BR -e " " \fIcommand\fR " [" \fIargs\fR "...]"
.br
.B zigcat
.BR -l " | " --listen
[\fIoptions\fR]
.BR -c " " \fIcommand\fR
.br
.B zigcat
.BR --help " | " --version " | " --version-all
.SH DESCRIPTION
.B zigcat
is a feature-rich network utility which reads and writes data across networks from the command line.
It is a from-scratch implementation of
.BR ncat ,
written in Zig.
.B zigcat
can be used for a wide variety of tasks, including:
.IP \(bu 2
Connecting to a remote server
.IP \(bu 2
Listening for incoming connections
.IP \(bu 2
Transferring files
.IP \(bu 2
Port scanning
.IP \(bu 2
Acting as a proxy
.SH OPTIONS
.SS "CONNECT MODE (default)"
.TP
\fB<host> <port>\fR
Connect to the specified host and port.
.SS "LISTEN MODE"
.TP
.BR -l ", " --listen
Listen for incoming connections.
.TP
.BR -k ", " --keep-open
Keep listening after a client disconnects.
.TP
.BR -m ", " --max-conns " <n>"
Maximum number of concurrent connections (u32).
.SS "BROKER/CHAT MODE"
.TP
.B --broker
Enable broker mode. In this mode,
.B zigcat
relays data between all connected clients.
.TP
.B --chat
Enable chat mode. This is similar to broker mode, but is line-oriented and includes nicknames for clients (mutually exclusive with \fB--broker\fR).
.TP
.BR --max-clients " <n>"
Maximum number of clients for broker/chat mode (u32, default 50).
.SS "PROTOCOL OPTIONS"
.TP
.BR -u ", " --udp
Use UDP instead of the default TCP.
.TP
.B --sctp
Use SCTP instead of the default TCP.
.TP
.BR -U ", " --unixsock " <path>"
Use a Unix domain socket.
.TP
.B -4
Use IPv4 only. In client mode, only attempts to connect to IPv4 addresses. In server mode, listens only on IPv4.
.TP
.B -6
Use IPv6 only. In client mode, only attempts to connect to IPv6 addresses. In server mode, listens only on IPv6.
.TP
.B Dual-Stack Listening
By default, if no bind address or IP version flag is specified in listen mode, zigcat will listen on both IPv4 (0.0.0.0) and IPv6 (::) simultaneously.
.TP
.BR -s ", " --source " <addr>"
Bind to the specified local source address before connecting.
.TP
.BR -p ", " --source-port " <port>"
Bind to the specified local source port (0-65535).
.TP
.B --keep-source-port
Retry connection attempts without changing the bound source port.
.TP
.BR -n ", " --nodns
Disable DNS lookups; treat the host argument as a literal address.
.SS "TIMING OPTIONS"
.TP
.BR -w ", " --wait " <secs>"
Connect timeout in seconds.
.TP
.BR -i ", " --idle-timeout " <secs>"
Idle timeout in seconds.
.TP
.BR -q ", " --close-on-eof
Close the connection on EOF from stdin.
.SS "TRANSFER OPTIONS"
.TP
.B --send-only
Only send data, ignoring received data (mutually exclusive with \fB--recv-only\fR).
.TP
.B --recv-only
Only receive data, ignoring sent data (mutually exclusive with \fB--send-only\fR).
.TP
.BR -C ", " --crlf
Convert LF to CRLF.
.TP
.BR -t ", " --telnet
Enable Telnet protocol processing (RFC 854). Handles IAC (Interpret As Command) sequences, performs automatic option negotiation (WILL/WONT/DO/DONT), and escapes binary data (IAC IAC). Supports ECHO, SUPPRESS-GO-AHEAD, TERMINAL-TYPE, NAWS (window size), and LINEMODE options. Use when connecting to BBSes, MUD servers, network equipment management interfaces, and other Telnet-based legacy systems. The protocol is 8-bit clean with application data remaining untouched.
.TP
.B --no-shutdown
Do not shutdown the write half of the socket after EOF on stdin.
.TP
.BR -d ", " --delay " <ms>"
Wait between reads and writes to shape traffic (milliseconds, u32).
.SS "SSL/TLS/DTLS OPTIONS"
.PP
.B zigcat
supports two TLS backends selected at build time:
.IP \(bu 2
.B OpenSSL
(default): Full TLS 1.0-1.3 + DTLS 1.0-1.3 support
.IP \(bu 2
.B wolfSSL
(opt-in via -Dtls-backend=wolfssl): TLS 1.0-1.3 only, 60% smaller binary
.PP
All TLS flags work with both backends. DTLS flags only work with OpenSSL backend.
.TP
.B --ssl
Enable SSL/TLS (TCP) or DTLS (UDP).
.TP
.B --dtls
Enable DTLS (Datagram Transport Layer Security over UDP). OpenSSL backend only.
.TP
.BR --dtls-mtu " <bytes>"
Set DTLS path MTU in bytes (default: 1200, range: 296-65507). OpenSSL backend only.
.TP
.BR --dtls-version " <version>"
Set DTLS protocol version. Accepted values are 1.0, 1.2, 1.3. Default is 1.2. Note that DTLS 1.3 requires OpenSSL 3.2.0 or later. OpenSSL backend only.
.TP
.BR --dtls-timeout " <ms>"
Set initial DTLS retransmission timeout in milliseconds (default: 1000). OpenSSL backend only.
.TP
.B --ssl-verify
Verify the server certificate. This is the default.
.TP
.B --no-ssl-verify
Do not verify the server certificate.
.TP
.B --ssl-verify=false
Alternate form to disable certificate verification.
.TP
.BR --ssl-cert " <file>"
The SSL certificate file to use in server mode.
.TP
.BR --ssl-key " <file>"
The SSL private key file to use in server mode.
.TP
.BR --ssl-trustfile " <file>"
The SSL CA certificate bundle.
.TP
.BR --ssl-crl " <file>"
The Certificate Revocation List (CRL) file.
.TP
.BR --ssl-ciphers " <ciphers>"
The SSL cipher suite list.
.TP
.BR --ssl-servername " <name>"
The SNI server name for virtual hosting.
.TP
.BR --ssl-alpn " <protocols>"
The ALPN protocol list (e.g., "h2,http/1.1").
.SS "PROXY OPTIONS"
.TP
.BR --proxy " <url>"
The proxy URL (e.g., http://host:port, socks5://host:port).
.TP
.BR --proxy-type " <type>"
Proxy protocol selection; accepted values are http, socks4, socks5.
.TP
.BR --proxy-auth " <user:pass>"
The proxy authentication credentials.
.TP
.BR --proxy-dns " <mode>"
Proxy DNS resolution mode; accepted values are local, remote, both.
.SS "EXECUTION OPTIONS"
.PP
.B zigcat
requires explicit security acknowledgment for exec mode in listen mode to prevent accidental remote code execution vulnerabilities.
.TP
.BR -e ", " --exec " <cmd> " [\fIargs...\fR]
Execute the given command with its arguments. When in listen mode (\fB-l\fR), requires the \fB--allow\fR flag. Optionally add \fB--allow-ip\fR for IP-based restrictions (defense-in-depth).
.TP
.BR -c ", " --sh-exec " <cmd>"
Execute the given command via a shell. When in listen mode (\fB-l\fR), requires the \fB--allow\fR flag. Optionally add \fB--allow-ip\fR for IP-based restrictions (defense-in-depth).
.TP
.B --no-stdin
Do not forward client stdin to the executed command.
.TP
.B --no-stdout
Discard stdout from the executed command.
.TP
.B --no-stderr
Discard stderr from the executed command.
.TP
.B --allow
Acknowledge and permit potentially dangerous exec operations (REQUIRED for \fB-e\fR/\fB-c\fR in listen mode). When used alone, accepts connections from any IP address (ncat-compatible). Add \fB--allow-ip\fR for defense-in-depth IP restrictions.
.SS "OUTPUT OPTIONS"
.TP
.BR -v ", " --verbose
Enable verbose output. Use multiple times for more verbosity.
.TP
.B --quiet
Suppress all output except for errors.
.TP
.BR -o ", " --output " <file>"
Write received data to the specified file.
.TP
.B --append
Append to the output file instead of truncating.
.TP
.BR -x ", " --hex-dump " [\fIfile\fR]"
Display data in hex format, optionally to a file.
.TP
.B --append-output
Append to the hex dump file instead of truncating.
.SS "VERBOSITY LEVELS"
.TP
.B quiet (0)
Silent except for errors.
.TP
.B normal (1)
Connection events and warnings (default).
.TP
.B verbose (2)
-v enables detailed connection info and transfer stats.
.TP
.B debug (3)
-vv enables protocol-level details and hex dumps.
.TP
.B trace (4)
-vvv enables all internal state and function tracing.
.SS "ACCESS CONTROL"
.TP
.BR --allow-ip " <ips>"
Allow specific IPs/CIDRs/hostnames (comma-separated). Optional for exec mode (\fB-e\fR/\fB-c\fR) when \fB--allow\fR is specified, provides defense-in-depth by restricting which IP addresses can use exec mode.
.TP
.BR --deny-ip " <ips>"
Deny specific IPs/CIDRs/hostnames (comma-separated).
.TP
.BR --allow-file " <file>"
Read allow rules from a file (one per line).
.TP
.BR --deny-file " <file>"
Read deny rules from a file (one per line).
.TP
.BR --drop-user " <user>"
Drop privileges to the specified user after binding (Unix only).
.SS "PORT SCANNING"
.TP
.BR -z ", " --zero-io
Zero-I/O mode (for port scanning and reachability checks).
.TP
.B --scan-parallel
Enable parallel workers for zero-I/O scans.
.TP
.B --scan-randomize
Randomize the scan order for stealthier probing.
.TP
.BR --scan-workers " <count>"
Set the number of worker threads for parallel scans (usize).
.TP
.BR --scan-delay " <ms>"
Insert a delay between probes in milliseconds (u32).
.SS "OTHER OPTIONS"
.TP
.B --
End of options. All following arguments are treated as positional arguments.
.TP
.BR -h ", " --help
Show the help message.
.TP
.B --version
Show the version.
.TP
.B --version-all
Show detailed version information (platform, features).
.SH EXAMPLES
.SS "Basic usage"
.PP
Connect to Google on port 80:
.RS
.EX
zigcat google.com 80
.EE
.RE
.PP
Listen on port 8080:
.RS
.EX
zigcat -l 8080
.EE
.RE
.PP
Listen on port 8080 and keep listening after a client disconnects:
.RS
.EX
zigcat -l -k 8080
.EE
.RE
.PP
Connect to a DNS server using UDP:
.RS
.EX
zigcat -u 192.168.1.1 53
.EE
.RE
.SS "Verbosity control"
.PP
Verbose output:
.RS
.EX
zigcat -v host 80
.EE
.RE
.PP
Debug output:
.RS
.EX
zigcat -vv host 80
.EE
.RE
.PP
Trace output:
.RS
.EX
zigcat -vvv host 80
.EE
.RE
.PP
Quiet output:
.RS
.EX
zigcat --quiet host 80
.EE
.RE
.SS "I/O control"
.PP
Only send data:
.RS
.EX
zigcat --send-only host 80
.EE
.RE
.PP
Only receive data:
.RS
.EX
zigcat --recv-only host 80
.EE
.RE
.PP
Save received data to a file:
.RS
.EX
zigcat -o output.txt host 80
.EE
.RE
.PP
Display data in hex format:
.RS
.EX
zigcat -x host 80
.EE
.RE
.PP
Save hex dump to a file:
.RS
.EX
zigcat -x dump.hex host 80
.EE
.RE
.SS "Advanced modes"
.PP
Broker mode on port 8080:
.RS
.EX
zigcat -l --broker 8080
.EE
.RE
.PP
Chat mode on port 8080:
.RS
.EX
zigcat -l --chat 8080
.EE
.RE
.PP
Broker with 100 max clients:
.RS
.EX
zigcat -l --broker --max-clients 100 8080
.EE
.RE
.PP
Connect to a Unix socket:
.RS
.EX
zigcat -U /tmp/socket
.EE
.RE
.PP
Listen on a Unix socket:
.RS
.EX
zigcat -l -U /tmp/socket
.EE
.RE
.SS "Command execution"
.PP
Execute a shell (ncat-compatible, accepts all IPs):
.RS
.EX
zigcat -l 9000 -e /bin/sh --allow
.EE
.RE
.PP
Execute a shell with IP restrictions (defense-in-depth):
.RS
.EX
zigcat -l 9000 -e /bin/sh --allow --allow-ip 127.0.0.1
.EE
.RE
.PP
Execute grep with flags (using -- to separate):
.RS
.EX
zigcat -l 9000 --allow -e -- grep -v foo
.EE
.RE
.SS "Port scanning"
.PP
Test if a single port is reachable without transferring data:
.RS
.EX
zigcat -z example.com 443
.EE
.RE
.PP
Scan a range with parallel workers and randomized order:
.RS
.EX
zigcat -z --scan-parallel --scan-workers 20 --scan-randomize example.com 1-1024
.EE
.RE
.PP
Perform a stealthier scan with added delay between probes:
.RS
.EX
zigcat -z --scan-parallel --scan-delay 100 target.example 1-65535
.EE
.RE
.SS "Telnet connections"
.PP
Connect to a BBS with Telnet protocol:
.RS
.EX
zigcat --telnet bbs.example.com 23
.EE
.RE
.PP
Connect to a MUD server with verbose logging:
.RS
.EX
zigcat --telnet -v mud.example.com 4000
.EE
.RE
.PP
Telnet server with protocol handling:
.RS
.EX
zigcat -l --telnet 2323
.EE
.RE
.PP
Telnet over TLS (secure connection):
.RS
.EX
zigcat --telnet --ssl telnet-secure.example.com 992
.EE
.RE
.PP
Telnet through SOCKS5 proxy:
.RS
.EX
zigcat --telnet --proxy socks5://localhost:1080 bbs.example.com 23
.EE
.RE
.PP
Debug Telnet protocol with hex dump:
.RS
.EX
zigcat --telnet -vv -x debug.hex server.example.com 23
.EE
.RE
.SS "DTLS connections"
.PP
.B Note:
DTLS requires the OpenSSL backend. If
.B zigcat
was built with the wolfSSL backend
.RI ( -Dtls-backend=wolfssl ),
DTLS operations will fail with
.IR DtlsNotAvailableWithWolfSSL .
.PP
Basic DTLS client connection:
.RS
.EX
zigcat --dtls example.com 4433
.EE
.RE
.PP
DTLS client with custom MTU and version:
.RS
.EX
zigcat --dtls --dtls-mtu 1400 --dtls-version 1.2 example.com 4433
.EE
.RE
.PP
DTLS client with certificate verification:
.RS
.EX
zigcat --dtls --ssl-verify --ssl-trustfile /etc/ssl/certs/ca-bundle.crt example.com 4433
.EE
.RE
.PP
DTLS server (requires certificate and key):
.RS
.EX
zigcat -l --dtls --ssl-cert cert.pem --ssl-key key.pem 4433
.EE
.RE
.PP
DTLS server with client certificate verification (mutual TLS):
.RS
.EX
zigcat -l --dtls --ssl-cert cert.pem --ssl-key key.pem --ssl-verify --ssl-trustfile ca.pem 4433
.EE
.RE
.SH "SEE ALSO"
.BR ncat (1)
.SH BUGS
No known bugs.
